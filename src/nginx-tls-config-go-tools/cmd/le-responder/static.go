// Code generated by go-bindata.
// sources:
// data/add.html
// data/index.html
// data/source.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAddHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xcd\x6a\x84\x30\x10\xbe\xf7\x29\x86\x79\x80\x0d\x74\x0f\x85\x12\xbd\x14\x4a\x6f\x2d\x6c\x5f\x20\x9b\x8c\x26\xa0\x89\x98\x49\xdb\xad\xf8\xee\x45\xb3\xff\xeb\x52\x4f\x33\xfa\xfd\x8c\x1f\x9f\xb4\xdc\x36\xe5\x03\x00\x80\xb4\xa4\x4c\x1e\xe7\x95\x1d\x37\x54\xbe\xf4\xa4\x98\xc0\xd3\x37\x68\xea\xd9\x55\x4e\x2b\x26\x29\xf2\xd7\x4c\x14\x27\xa6\xdc\x06\xb3\x3b\x13\xb1\xeb\xbb\x0a\x76\x7d\x86\xab\x42\xdf\x42\x4b\x6c\x83\x29\xf0\xe3\x7d\xf3\x89\xa0\x34\xbb\xe0\x0b\x14\xa9\x33\x8a\x09\x4f\xe8\x99\xe1\x7c\x97\x18\x78\xd7\x51\x81\xd6\x19\x43\x1e\xc1\xab\x96\x0a\xcc\x44\x84\x2f\xd5\x24\x2a\x50\xcf\xfe\x08\xe2\x4a\xa0\x2b\xdf\x42\x64\xe0\x00\x5b\xaa\x9d\x87\x56\x79\x55\x3b\x5f\x3f\x4b\xd1\xdd\x40\x2f\xec\x98\x7e\xf8\x60\x66\x43\xe4\xa3\x15\x42\x74\xbf\x54\xe0\xd3\x23\x82\x4a\x1c\xaa\xa0\x53\x2c\xf0\x38\x4e\x47\x2c\xa9\x6f\x42\xea\x35\x2d\x1a\x5f\xec\xf3\xbb\x48\x0d\x69\xde\xdb\xc7\x99\x89\xb7\xb0\xe9\x19\x06\xe8\x95\xaf\x09\x56\x19\x16\x61\x1c\x17\x81\xb3\x6e\xe8\xa6\xd8\xca\x61\x80\x15\x8c\xa3\x14\xfb\xfd\x9e\x32\x79\xb3\x24\x27\x45\xbe\xef\xea\x47\xfe\x8b\x34\xa6\x6d\xeb\x4e\x41\x6e\xf6\xeb\x42\x5c\xd3\x7d\x3a\xf6\xd5\xab\xa3\xe6\xe2\x02\x29\xa6\x12\x1d\x2a\x99\x7b\x28\x45\xee\xf7\x5f\x00\x00\x00\xff\xff\x9f\x64\x44\xd5\xe7\x02\x00\x00")

func dataAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAddHtml,
		"data/add.html",
	)
}

func dataAddHtml() (*asset, error) {
	bytes, err := dataAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/add.html", size: 743, mode: os.FileMode(420), modTime: time.Unix(1509438988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdd\x8f\x9b\x46\x10\x7f\xef\x5f\x31\xdd\x3e\xd8\x96\x2c\xa3\x6b\x1e\x12\xdd\x01\xd5\xd5\x49\x94\x93\xfa\x11\x85\xe6\xa9\xea\xc3\x98\x1d\x60\x9b\x65\x17\x2d\x43\x52\xcb\xe5\x7f\xaf\x60\xc9\xf9\x0b\x5c\xf7\x4e\xe5\xc5\x98\x99\xdf\xce\xfc\x7e\xf3\x01\x61\xc1\xa5\x8e\xbf\x01\x00\x08\x0b\x42\xe9\x6f\xfb\xbf\xac\x58\x53\xbc\x26\xc7\xc0\xd6\xea\x30\xf0\x0f\xf6\x0e\x75\xea\x54\xc5\xc0\xdb\x8a\x22\xc1\xf4\x17\x07\x7f\xe2\x67\xf4\x4f\xc5\xde\xaf\xbb\xb2\xc6\xa4\xac\xac\x01\x69\x1f\xf8\xe3\x1c\x53\x5e\x42\x85\x5c\x2c\x60\x77\xe4\xd7\x5d\xd2\xa6\x4d\x49\x86\x57\x39\xf1\x1b\x4d\xdd\xed\x8f\xdb\x07\x39\x17\x1d\x40\x2c\x56\x9f\x51\x37\x04\x51\x8f\xbf\xbb\x1e\x8d\x7d\x02\x07\x78\x4c\xf9\x3f\xc0\x33\xb1\x58\xd5\xcd\xa6\x54\x3c\x5f\x9c\xc3\x1c\x71\xe3\x0c\x64\xa8\x6b\x3a\xb6\xb6\xd3\x3a\x24\x4f\xd4\x21\x79\x9e\x10\xc9\x33\x95\x48\x9e\x2f\x45\x18\xf8\x2e\x19\x1a\x2f\xd8\x77\x5e\xb8\xb1\x72\x7b\xd0\x63\x55\xfc\x4e\xc1\x6e\x07\xab\xa6\x26\xb7\x7a\x53\xa2\xd2\xf7\x52\x3a\xaa\x6b\x68\xdb\x25\x6c\x6d\x03\xe8\x08\xb4\xcd\x73\x92\xa0\xcc\xb7\xf0\x3b\x84\x08\x85\xa3\x2c\x12\x81\xb6\xb9\x6d\x58\xc4\x3f\xf5\xbf\x30\xe7\x42\xd5\x8b\x30\xc0\x18\xfe\x3e\xf3\xfa\x21\xcd\xa2\x9b\x47\xd7\xf5\xdb\xde\xed\x8f\x30\xa8\xf6\xd9\xec\x76\xe0\xd0\xe4\x04\xab\x92\xea\x1a\x73\xea\x92\x38\xa2\x18\x56\x50\xf3\x56\x53\x24\x2a\x94\x52\x99\xfc\xf6\x86\xca\x3b\xd8\x58\x27\xc9\x0d\xf7\x98\x7e\xca\x9d\x6d\x8c\xbc\x05\x97\x6f\xe6\xdf\xbf\x78\xb5\x84\x9b\x57\x2f\x96\x70\xf3\xf2\xe5\xe2\x4e\xc4\x1d\x5b\x68\xdb\xd3\xc8\x64\xe4\x61\xb4\x30\xb3\xae\x04\x25\x23\x91\x09\x28\x89\x0b\x2b\x23\xf1\xfe\xd7\xe4\x37\x01\xbe\xbe\x91\x08\x9a\x4a\x22\xd3\xc9\x28\x86\xca\x54\x0d\xf7\xc8\xbe\x8f\x86\xf9\x2d\x94\x94\x64\x04\x18\x2c\xe9\xab\x25\x98\x44\x0e\x2d\x34\x8a\xfd\x6a\x3b\x41\x77\xb4\xd2\xda\x65\x6f\x15\xe9\x63\x26\x41\x47\x25\x1e\x61\x96\x4c\x53\xab\x6d\xe3\xd2\x0b\xd4\x92\xa7\x73\x4b\xfe\x57\x72\x55\xbf\x51\x55\xa6\x52\x64\xaa\xa1\x44\x83\x39\xc9\xdb\xa3\x6a\x87\x8c\x1b\x4d\x43\xd7\x44\xc2\xff\x9e\x72\x65\x17\x9f\xcd\x5e\xc8\x45\xfc\x0b\x96\x14\x06\x5c\x8c\x5b\x5f\xe3\xb6\x86\x0f\x54\xa2\x32\xca\xe4\xd3\x7e\x49\xaf\xef\xb4\x7d\x5d\xa0\xd6\x64\xf2\x0b\x2e\xf7\xbd\x54\xf5\xb9\x43\x18\x9c\xe6\xbe\x1f\xac\x94\x1c\x9f\x4d\xd5\x24\x5f\x6f\x90\xfd\xc8\x74\xbc\xfb\xb1\x61\x79\xd9\xb1\x93\xe0\x51\x81\xab\x10\x6b\x47\xf2\x5d\xb3\xe9\x0a\xb7\xf2\xc2\x40\xdb\x1e\x2e\x9a\xef\x04\x58\x93\x6a\x95\x7e\x8a\xc4\xb0\xff\xfc\x82\x9f\xf9\x3e\x9d\x2d\x67\xdd\x39\xef\x91\x0b\x68\xdb\x59\x37\xe5\xeb\x02\x7b\xf5\xfc\x92\xb9\x94\xc1\xa8\x61\x50\x4d\x65\xc7\xd9\x3d\x96\x65\x4c\xc2\xa3\x83\x2b\x47\x67\xdc\x1e\xd1\xab\x07\x53\xb3\x6b\x7c\x01\xfd\x2e\x72\x34\x9d\x48\x77\xfd\xbb\x1a\x1f\xe7\xb3\xd4\x96\x95\x26\x1e\xd5\x63\x30\x79\x45\x2e\x71\x3e\x59\x84\x47\xac\x9e\x25\x64\x52\xd8\x2f\xaf\xa9\x4b\x02\xda\xf6\x2a\x3e\x92\x26\xd8\xf8\x63\x3c\x97\xcb\x29\x9f\xc4\xff\x40\x86\xbe\x5c\x1b\x1e\x1b\xb6\x23\xc1\xfb\x33\x9e\x10\xfb\x67\x34\x0d\xea\x6b\x83\x97\xbd\xf7\x48\x78\x7f\xcc\x35\xf1\xc7\xcb\x35\xba\x1e\x4e\xdf\x7e\x41\xbf\x22\xf7\x6e\x87\x6f\x7d\x94\x52\xc4\xf7\x52\xfa\x14\x00\x60\xf8\xca\xf0\x9f\x16\x61\xe0\x3f\x79\xff\x09\x00\x00\xff\xff\x26\x0f\xe3\x53\xfa\x0a\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1509443860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSourceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x6a\xc3\x30\x0c\xbd\xef\x2b\x84\x3f\xa0\x3a\xf4\x36\x9c\x5c\x06\xbb\x6e\xd0\xfd\x80\x1b\xab\xb3\x21\xb1\x4d\xac\x0c\x4a\xf0\xbf\x0f\xdb\xd9\xda\x34\x19\x2c\xa7\x48\x7e\xef\xe9\x49\x3c\x69\x78\xe8\xdb\x27\x00\x00\x69\x48\xe9\xfa\x5b\x4a\xb6\xdc\x53\xfb\x62\x94\xfb\x24\x88\x7e\x1a\x3b\x92\x58\x9b\x15\x8f\x37\x82\x3c\x7b\x7d\xbd\xe3\x9a\xe3\x23\xd1\x1c\xef\x9e\x2f\x7e\x1c\x60\x20\x36\x5e\x37\xe2\xfd\xed\xf4\x21\x40\x75\x6c\xbd\x6b\x04\x4e\x41\x2b\x26\x71\x43\x17\x86\x75\x61\x62\xe0\x6b\xa0\x46\x18\xab\x35\x39\x01\x4e\x0d\xd4\x88\x4a\x14\xf0\xa5\xfa\x89\x1a\x51\xe7\x09\xc0\x7f\x0b\x18\x1f\xf9\x97\x3e\xcf\x70\xc8\x0d\x48\x69\xab\x11\xd6\x4b\x01\xfb\x67\x89\x61\x03\x5a\xd5\xa5\x17\xa9\xa7\x8e\x97\x79\x8b\xc3\x2d\x2c\x7f\xf3\x0c\x63\x19\x71\xa8\xb0\x08\x29\xed\x02\x8b\xae\x0f\x79\xf7\x36\x9b\x86\x94\x24\x2e\xf5\x5f\xca\xe4\xf4\x9e\x9c\xc4\xea\xef\x61\x91\x9d\xcd\x56\x57\x8c\xd3\x79\xb0\xb7\xcb\x9d\x96\x12\xdb\x0d\x33\xfb\xeb\xe2\x78\x79\xb5\xd4\xaf\x1c\x48\xcc\x49\xf8\x89\x53\xcd\x90\xc4\x1a\xc9\xef\x00\x00\x00\xff\xff\x3b\x09\x10\x5f\x9a\x02\x00\x00")

func dataSourceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSourceHtml,
		"data/source.html",
	)
}

func dataSourceHtml() (*asset, error) {
	bytes, err := dataSourceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/source.html", size: 666, mode: os.FileMode(420), modTime: time.Unix(1509438988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/add.html": dataAddHtml,
	"data/index.html": dataIndexHtml,
	"data/source.html": dataSourceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{dataAddHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"source.html": &bintree{dataSourceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

