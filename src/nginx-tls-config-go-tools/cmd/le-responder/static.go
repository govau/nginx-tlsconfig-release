// Code generated by go-bindata.
// sources:
// data/add.html
// data/index.html
// data/source.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAddHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xcd\x6a\x84\x30\x10\xbe\xf7\x29\x86\x79\x80\x0d\x74\x0f\x85\x12\xbd\x14\x4a\x6f\x2d\x6c\x5f\x20\x9b\x8c\x26\xa0\x89\x98\x49\xdb\xad\xf8\xee\x45\xb3\xff\xeb\x52\x4f\x33\xfa\xfd\x8c\x1f\x9f\xb4\xdc\x36\xe5\x03\x00\x80\xb4\xa4\x4c\x1e\xe7\x95\x1d\x37\x54\xbe\xf4\xa4\x98\xc0\xd3\x37\x68\xea\xd9\x55\x4e\x2b\x26\x29\xf2\xd7\x4c\x14\x27\xa6\xdc\x06\xb3\x3b\x13\xb1\xeb\xbb\x0a\x76\x7d\x86\xab\x42\xdf\x42\x4b\x6c\x83\x29\xf0\xe3\x7d\xf3\x89\xa0\x34\xbb\xe0\x0b\x14\xa9\x33\x8a\x09\x4f\xe8\x99\xe1\x7c\x97\x18\x78\xd7\x51\x81\xd6\x19\x43\x1e\xc1\xab\x96\x0a\xcc\x44\x84\x2f\xd5\x24\x2a\x50\xcf\xfe\x08\xe2\x4a\xa0\x2b\xdf\x42\x64\xe0\x00\x5b\xaa\x9d\x87\x56\x79\x55\x3b\x5f\x3f\x4b\xd1\xdd\x40\x2f\xec\x98\x7e\xf8\x60\x66\x43\xe4\xa3\x15\x42\x74\xbf\x54\xe0\xd3\x23\x82\x4a\x1c\xaa\xa0\x53\x2c\xf0\x38\x4e\x47\x2c\xa9\x6f\x42\xea\x35\x2d\x1a\x5f\xec\xf3\xbb\x48\x0d\x69\xde\xdb\xc7\x99\x89\xb7\xb0\xe9\x19\x06\xe8\x95\xaf\x09\x56\x19\x16\x61\x1c\x17\x81\xb3\x6e\xe8\xa6\xd8\xca\x61\x80\x15\x8c\xa3\x14\xfb\xfd\x9e\x32\x79\xb3\x24\x27\x45\xbe\xef\xea\x47\xfe\x8b\x34\xa6\x6d\xeb\x4e\x41\x6e\xf6\xeb\x42\x5c\xd3\x7d\x3a\xf6\xd5\xab\xa3\xe6\xe2\x02\x29\xa6\x12\x1d\x2a\x99\x7b\x28\x45\xee\xf7\x5f\x00\x00\x00\xff\xff\x9f\x64\x44\xd5\xe7\x02\x00\x00")

func dataAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAddHtml,
		"data/add.html",
	)
}

func dataAddHtml() (*asset, error) {
	bytes, err := dataAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/add.html", size: 743, mode: os.FileMode(420), modTime: time.Unix(1509412841, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4f\x6f\xbc\x36\x10\xbd\xf7\x53\x4c\xdd\x03\xbb\x12\x02\x6d\x7f\x87\x44\x09\x50\xa5\x9b\x44\x89\x54\xb5\x51\xd2\x5b\xd5\x83\x17\x0f\xe0\x06\x6c\x64\x0f\x49\x57\x5b\xbe\x7b\x65\x43\xb2\xff\xd8\x68\x7b\x2c\x17\x58\xe6\x3d\xfc\xde\x78\x66\xbc\x49\x45\x4d\x9d\x7d\x07\x00\x90\x54\xc8\xc5\xf0\xe8\x7f\x92\xa4\x1a\xb3\x25\x1a\x02\xd2\xba\x4e\xe2\xe1\xc5\x16\x60\x73\x23\x5b\x02\x5a\xb7\x98\x32\xc2\xbf\x29\xfe\x8b\xbf\xf1\xe1\x2d\xdb\xe2\xdc\x55\x74\x2a\x27\xa9\x15\x08\xfd\x48\xb3\x42\x9b\x26\x04\x9e\x53\x08\x2d\xa7\x6a\x0e\x9b\x3d\xb0\xbb\x84\xce\xbb\x06\x15\x45\x25\xd2\x5d\x8d\xee\xf1\xe7\xf5\xa3\x98\x31\x47\x60\xf3\xe8\x8d\xd7\x1d\x42\xea\xf9\xd7\xe7\xb3\xb9\x57\xb1\xc3\xe7\x39\x9d\x4f\x77\xba\xe7\x91\xed\x56\x8d\xa4\xd9\xfc\x98\x67\x90\x3a\xa3\xa0\xe0\xb5\xc5\xfd\x68\xbf\xcd\x5a\x3c\x24\x68\xcc\x79\xbc\x4d\x7a\xb2\xd2\x62\xbd\x93\xde\x36\x7b\x90\xb0\xd9\x40\xd4\x59\x34\xd1\x5d\xc3\x65\x7d\x23\x84\x41\x6b\xa1\xef\x43\x58\xeb\x0e\xb8\x41\xa8\x75\x59\xa2\x00\xa9\xbe\x87\x3f\x20\xe1\x50\x19\x2c\x52\x16\xd7\xba\xd4\x1d\xb1\xec\x17\x7f\x87\x19\x55\xd2\xce\x93\x98\x67\xf0\xcf\x11\xea\xa7\xbc\x48\x17\x9f\xd0\xe5\xbd\x87\xfd\x99\xc4\xed\x56\xcd\x66\x03\x86\xab\x12\x21\x6a\xd0\x5a\x5e\xa2\x13\xb1\x67\x31\x69\xc1\xd2\xba\xc6\x94\xb5\x5c\x08\xa9\xca\xab\x05\x36\xd7\xb0\xd2\x46\xa0\x19\x9f\x79\xfe\x5a\x1a\xdd\x29\x71\x05\xa6\x5c\xcd\x7e\xfc\x76\x19\xc2\xe2\xf2\x5b\x08\x8b\x8b\x8b\xf9\x35\xcb\x9c\x5b\xe8\xfb\xc3\x95\x51\x89\xdd\xd5\x12\xb7\x0f\x20\x45\xca\x0a\x06\x0d\x52\xa5\x45\xca\x9e\x7e\x7b\xf9\x9d\xc1\xb0\xbf\x29\x8b\xbb\x56\x70\xc2\x83\x2a\x4c\xa4\x6a\x3b\xf2\x4c\x5f\x46\x63\xe9\x56\x52\x08\x54\x0c\x14\x6f\xf0\x23\x12\x9f\x64\x8e\x25\x34\xc9\xfd\x88\x1d\xb0\x9d\xad\xdc\x9a\xe2\x5e\x62\xbd\xef\x24\x76\x56\xb2\x09\x67\xf6\xa4\x33\xab\x3b\x93\xff\xff\x9c\xb5\x7e\x92\xc8\x42\xe6\x9c\xd0\x42\xc3\x15\x2f\x51\x5c\xed\x6d\x75\x42\x7c\x55\xe3\x58\x32\x29\x1b\xee\x87\x4e\xc9\x64\x47\x8d\x97\x50\x95\xfd\xca\x1b\x4c\x62\xaa\xa6\xa3\xb7\x7c\x6d\xe1\x19\x1b\x2e\x95\x54\xe5\x69\xdc\x8b\xcf\xee\xe9\xf8\x8d\xcf\x83\x3d\x06\x24\xf1\xa1\xb0\x6d\xcb\xe4\x68\xe8\xa8\x5f\x4e\x9a\x19\x02\xc2\x37\x83\x33\xe5\x1b\x82\xc4\xd7\x40\xe7\xef\xd3\xde\x59\x8c\xa5\x41\xf1\xd0\xad\xdc\xae\x44\x83\x6b\xe8\xfb\xdd\x11\xf2\x03\x03\xad\xf2\x5a\xe6\xaf\x29\x1b\x27\x9b\x9f\xde\x81\x0d\xc2\x60\xa8\xc2\x20\x0c\xdc\xa7\x9e\x38\x55\xd0\xf7\x81\x6b\xe1\x65\xe5\x3c\x7f\x4c\x90\xaf\x44\x4c\x06\xc6\xc4\xc9\x02\xa2\x97\x4a\xbf\xdf\x62\x8d\xe4\x84\x9d\xa3\xab\x08\xc2\x40\x78\xc2\x84\xae\xe1\x4b\x83\xae\xe3\x91\xf2\x85\x84\x67\x54\xf8\xfe\x1f\x14\xf0\x8e\xf4\xc4\xfa\xfe\x33\xe7\x2c\x3f\x9d\xb4\xc9\xf2\x3a\x9c\x8b\xb1\xef\x9f\x2d\x6c\xf7\x3c\xe0\x42\xb0\xec\x46\x88\x41\x02\x00\x8c\xe7\xcf\x70\xe8\x24\xf1\xf0\x3f\xe0\xdf\x00\x00\x00\xff\xff\xe6\x96\xd0\xf1\x0f\x08\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2063, mode: os.FileMode(420), modTime: time.Unix(1509413462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSourceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x6a\xc3\x30\x0c\xbd\xef\x2b\x84\x3f\xa0\x3a\xf4\x36\x9c\x5c\x06\xbb\x6e\xd0\xfd\x80\x1b\xab\xb3\x21\xb1\x4d\xac\x0c\x4a\xf0\xbf\x0f\xdb\xd9\xda\x34\x19\x2c\xa7\x48\x7e\xef\xe9\x49\x3c\x69\x78\xe8\xdb\x27\x00\x00\x69\x48\xe9\xfa\x5b\x4a\xb6\xdc\x53\xfb\x62\x94\xfb\x24\x88\x7e\x1a\x3b\x92\x58\x9b\x15\x8f\x37\x82\x3c\x7b\x7d\xbd\xe3\x9a\xe3\x23\xd1\x1c\xef\x9e\x2f\x7e\x1c\x60\x20\x36\x5e\x37\xe2\xfd\xed\xf4\x21\x40\x75\x6c\xbd\x6b\x04\x4e\x41\x2b\x26\x71\x43\x17\x86\x75\x61\x62\xe0\x6b\xa0\x46\x18\xab\x35\x39\x01\x4e\x0d\xd4\x88\x4a\x14\xf0\xa5\xfa\x89\x1a\x51\xe7\x09\xc0\x7f\x0b\x18\x1f\xf9\x97\x3e\xcf\x70\xc8\x0d\x48\x69\xab\x11\xd6\x4b\x01\xfb\x67\x89\x61\x03\x5a\xd5\xa5\x17\xa9\xa7\x8e\x97\x79\x8b\xc3\x2d\x2c\x7f\xf3\x0c\x63\x19\x71\xa8\xb0\x08\x29\xed\x02\x8b\xae\x0f\x79\xf7\x36\x9b\x86\x94\x24\x2e\xf5\x5f\xca\xe4\xf4\x9e\x9c\xc4\xea\xef\x61\x91\x9d\xcd\x56\x57\x8c\xd3\x79\xb0\xb7\xcb\x9d\x96\x12\xdb\x0d\x33\xfb\xeb\xe2\x78\x79\xb5\xd4\xaf\x1c\x48\xcc\x49\xf8\x89\x53\xcd\x90\xc4\x1a\xc9\xef\x00\x00\x00\xff\xff\x3b\x09\x10\x5f\x9a\x02\x00\x00")

func dataSourceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSourceHtml,
		"data/source.html",
	)
}

func dataSourceHtml() (*asset, error) {
	bytes, err := dataSourceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/source.html", size: 666, mode: os.FileMode(420), modTime: time.Unix(1509413501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/add.html": dataAddHtml,
	"data/index.html": dataIndexHtml,
	"data/source.html": dataSourceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{dataAddHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"source.html": &bintree{dataSourceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

