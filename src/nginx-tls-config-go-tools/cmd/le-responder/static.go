// Code generated by go-bindata.
// sources:
// data/add.html
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAddHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xcd\x4e\xc3\x30\x0c\xbe\xf3\x14\x96\x1f\x80\x48\xec\x80\x84\x9a\x5d\x90\x10\x37\x90\xc6\x0b\x78\x89\xbb\x18\xb5\x49\xd5\xb8\x83\x31\xed\xdd\xd1\x96\x75\x2d\x7f\xe2\x66\xc7\xdf\x9f\xec\x54\x41\xdb\x66\x79\x05\x00\x50\x05\x26\x5f\xca\x53\xab\xa2\x0d\x2f\xef\x7b\x26\x65\x88\xfc\x06\x8e\x7b\x95\x5a\x1c\x29\x57\xa6\x4c\x27\x74\x76\xbd\x74\x0a\xba\xeb\xd8\xa2\xf2\xbb\x9a\x57\xda\x52\x79\xc5\x09\x37\x11\x4c\x99\x9d\xbd\xcd\x64\x5e\xad\x93\xdf\xcd\x94\xc3\xe2\xcf\x10\x61\x31\xc3\xd5\xa9\x6f\xa1\x65\x0d\xc9\x5b\x7c\x7e\x5a\xbd\x20\x90\x53\x49\xd1\xa2\x19\x3a\x4f\xca\xb3\x1c\x27\x86\xc4\x6e\x18\x23\x07\xf1\x9e\x23\x42\xa4\x96\x2d\x16\x22\xc2\x96\x9a\x81\x2d\xba\x93\x3f\x82\xf9\x26\xd0\x2d\x1f\x53\x56\xd0\x04\x6b\xde\x48\x84\x96\x22\x6d\x24\x6e\xee\x2a\xd3\xfd\x80\x7e\xb1\x3b\x6e\x68\x34\x0b\x29\xeb\xc5\x0a\x21\xcb\x07\x5b\xbc\xbd\x41\xa0\x41\x53\x9d\xdc\x90\x2d\x5e\xca\x63\x88\x7f\xd5\xf3\xb0\x6e\x65\xd2\x5c\x9d\xdb\x5f\x98\xfb\x3d\x5c\xbb\xdc\xd7\x0f\xc2\x8d\x87\xc3\x61\x76\x9f\xe3\x3e\xc7\xeb\x94\x93\x54\xa6\xfc\x96\xcf\x00\x00\x00\xff\xff\x6e\xf9\xed\x39\x35\x02\x00\x00")

func dataAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAddHtml,
		"data/add.html",
	)
}

func dataAddHtml() (*asset, error) {
	bytes, err := dataAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/add.html", size: 565, mode: os.FileMode(420), modTime: time.Unix(1509338258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x4d\x6f\xdb\x38\x10\xbd\xef\xaf\x98\xe5\x1e\x6c\x03\x86\x04\x6f\x0e\x09\x12\x4a\x45\x9a\x0f\x24\x40\xd1\x06\x49\x6f\x45\x0f\x63\x71\x24\xb1\x91\x48\x81\x1a\x25\x35\x5c\xff\xf7\x82\x92\x12\xf9\x2b\xa9\xab\x8b\x68\xcd\x7b\x1c\xbe\xe1\x9b\xb1\xcc\xb9\x2c\xe2\x7f\x00\x00\x64\x4e\xa8\xba\x65\xfb\x93\x35\x17\x14\x5f\x90\x63\x60\x6b\x0b\x19\x76\x1f\x06\x40\x9d\x38\x5d\x31\xf0\xa2\xa2\x48\x30\xfd\xe4\xf0\x07\x3e\x61\xf7\x55\x0c\x38\xff\xa4\x8d\x49\x58\x5b\x03\xca\xde\xf2\x18\x13\x9e\x42\x85\x9c\x4f\x60\xb9\x01\xf3\x8f\xb2\x49\x53\x92\xe1\x20\x23\xbe\x2a\xc8\x2f\x3f\x2e\x6e\xd5\x58\x78\x82\x98\x04\x4f\x58\x34\x04\x51\xcb\x3f\x3b\x9c\x8d\x6d\xfe\x35\x3e\x26\xfc\x17\xf4\x54\x4c\x82\xba\x99\x97\x9a\xc7\x93\x5d\x9a\x23\x6e\x9c\x81\x14\x8b\x9a\x36\xa3\xab\xa1\x5c\x61\x57\x99\xbe\xd8\xe1\x50\x6d\x39\xb7\x6a\xb1\x56\xd7\x2a\xbe\xd1\xb0\x5c\x42\xd0\xd4\xe4\x82\xab\x12\x75\x71\xae\x94\xa3\xba\x86\xd5\x6a\x0a\x0b\xdb\x00\x3a\x82\xc2\x66\x19\x29\xd0\xe6\x5f\xf8\x06\x12\x21\x77\x94\x46\x22\x2c\x6c\x66\x1b\x16\xf1\xa7\xf6\x0d\x63\xce\x75\x3d\x91\x21\xc6\xf0\x6b\x07\xf5\x21\x49\xa3\xd9\x2b\xf4\xe2\xba\x85\x7d\x97\x61\x35\x9c\x66\xb9\x04\x87\x26\x23\x08\x4a\xaa\x6b\xcc\xc8\x1f\x62\x43\xa2\xac\xa0\xe6\x45\x41\x91\xa8\x50\x29\x6d\xb2\xd3\x19\x95\x67\x30\xb7\x4e\x91\xeb\xd7\x98\x3c\x66\xce\x36\x46\x9d\x82\xcb\xe6\xe3\xff\x8f\x4e\xa6\x30\x3b\x39\x9a\xc2\xec\xf8\x78\x72\x26\x62\xaf\x16\x56\xab\xed\xcc\x64\xd4\x7a\x36\x99\x5a\x57\x82\x56\x91\x48\x05\x94\xc4\xb9\x55\x91\xb8\xfb\xf2\xf0\x55\x40\x77\xbd\x91\x08\x9b\x4a\x21\xd3\x96\xfd\xa4\x36\x55\xc3\x2d\xb3\x75\x51\xef\xd9\x5c\x2b\x45\x46\x80\xc1\x92\x5e\x22\xe1\x9b\xcc\xde\x41\x7b\xb9\x2f\xb1\x2d\xb6\x97\x95\xd4\x2e\xbd\xd6\x54\x6c\x2a\x09\xbd\x94\x8d\x3b\xf7\x8d\xa6\x53\x9d\x20\x53\x0d\x25\x1a\xcc\x48\x9d\x6e\x14\x44\x32\xce\x0b\xea\x0b\x1b\x89\xee\xbd\xad\x94\x5d\xbc\x63\x4f\xc9\x79\xfc\x19\x4b\x92\x21\xe7\xfb\xa3\x97\xb8\xa8\xe1\x9e\x4a\xd4\x46\x9b\xec\x6d\xdc\x83\x6d\x5c\xf2\xce\x3e\xe7\x6d\x1d\xea\x5d\x80\x0c\xb7\x0f\x36\x18\x2b\x21\xc7\x3b\xae\x7a\x53\x4c\x17\x50\xad\x65\xbc\xa8\xd6\x36\xac\xde\x07\x7a\x7d\xaf\xf2\x0e\x62\x5c\x38\x52\x37\xcd\xdc\xdf\x4a\xd0\xa9\xfe\x23\x6d\x6f\xa0\x97\xaa\x53\x08\x1e\x72\xfb\x7c\x49\x05\xb1\xdf\x6a\xad\x65\xff\x13\x60\x4d\x52\xe8\xe4\x31\x12\xfd\x24\x69\xc7\xe4\x48\xb5\xe0\xd1\x74\xe4\x0f\x74\x87\x9c\xc3\x6a\x35\xf2\xed\xd2\xed\xd2\x75\xeb\x6e\x9b\xbc\x93\xfe\x9e\x0c\x3d\x1f\x98\x1d\x1b\xb6\x7b\x72\xb7\x5b\x1c\x92\x7a\x7f\xb1\xf6\x1a\x61\xbb\xcf\xc3\xd6\xe9\x03\x6c\x7d\xbe\xa1\x52\x22\x3e\x57\xaa\x3b\x02\x00\xf4\xf3\xb4\x1b\xa2\x32\xec\xfe\xd0\x7e\x07\x00\x00\xff\xff\xcc\x4a\x73\x27\xd8\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1752, mode: os.FileMode(420), modTime: time.Unix(1509341375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/add.html": dataAddHtml,
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{dataAddHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

