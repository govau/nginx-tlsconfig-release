// Code generated by go-bindata.
// sources:
// data/add.html
// data/index.html
// data/source.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAddHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xcd\x6a\x84\x30\x10\xbe\xf7\x29\x86\x79\x80\x0d\x74\x0f\x85\x12\xbd\x14\x4a\x6f\x2d\x6c\x5f\x20\x9b\x8c\x26\xa0\x89\x98\x49\xdb\xad\xf8\xee\x45\xb3\xff\xeb\x52\x4f\x33\xfa\xfd\x8c\x1f\x9f\xb4\xdc\x36\xe5\x03\x00\x80\xb4\xa4\x4c\x1e\xe7\x95\x1d\x37\x54\xbe\xf4\xa4\x98\xc0\xd3\x37\x68\xea\xd9\x55\x4e\x2b\x26\x29\xf2\xd7\x4c\x14\x27\xa6\xdc\x06\xb3\x3b\x13\xb1\xeb\xbb\x0a\x76\x7d\x86\xab\x42\xdf\x42\x4b\x6c\x83\x29\xf0\xe3\x7d\xf3\x89\xa0\x34\xbb\xe0\x0b\x14\xa9\x33\x8a\x09\x4f\xe8\x99\xe1\x7c\x97\x18\x78\xd7\x51\x81\xd6\x19\x43\x1e\xc1\xab\x96\x0a\xcc\x44\x84\x2f\xd5\x24\x2a\x50\xcf\xfe\x08\xe2\x4a\xa0\x2b\xdf\x42\x64\xe0\x00\x5b\xaa\x9d\x87\x56\x79\x55\x3b\x5f\x3f\x4b\xd1\xdd\x40\x2f\xec\x98\x7e\xf8\x60\x66\x43\xe4\xa3\x15\x42\x74\xbf\x54\xe0\xd3\x23\x82\x4a\x1c\xaa\xa0\x53\x2c\xf0\x38\x4e\x47\x2c\xa9\x6f\x42\xea\x35\x2d\x1a\x5f\xec\xf3\xbb\x48\x0d\x69\xde\xdb\xc7\x99\x89\xb7\xb0\xe9\x19\x06\xe8\x95\xaf\x09\x56\x19\x16\x61\x1c\x17\x81\xb3\x6e\xe8\xa6\xd8\xca\x61\x80\x15\x8c\xa3\x14\xfb\xfd\x9e\x32\x79\xb3\x24\x27\x45\xbe\xef\xea\x47\xfe\x8b\x34\xa6\x6d\xeb\x4e\x41\x6e\xf6\xeb\x42\x5c\xd3\x7d\x3a\xf6\xd5\xab\xa3\xe6\xe2\x02\x29\xa6\x12\x1d\x2a\x99\x7b\x28\x45\xee\xf7\x5f\x00\x00\x00\xff\xff\x9f\x64\x44\xd5\xe7\x02\x00\x00")

func dataAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAddHtml,
		"data/add.html",
	)
}

func dataAddHtml() (*asset, error) {
	bytes, err := dataAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/add.html", size: 743, mode: os.FileMode(420), modTime: time.Unix(1509412841, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x6f\xdb\x3c\x0c\xbe\xbf\xbf\x82\xaf\x76\x48\x02\x04\x36\xb2\x1e\x5a\xb4\xb2\x87\x2e\x6d\xd1\x02\xc3\x56\xd4\xeb\x69\xd8\x41\xb1\x68\x5b\xab\x2d\x19\x32\xdd\x2e\xc8\xfc\xdf\x07\x7f\xb4\xf9\x72\xb2\xac\xc5\x7c\xb1\x62\x3e\x8f\xc8\x87\x22\xa9\xf0\x84\xb2\xd4\xff\x0f\x00\x80\x27\x28\x64\xbb\x6c\x7e\x92\xa2\x14\xfd\x29\x5a\x02\x32\x26\xe5\x6e\xfb\x61\x09\x28\x42\xab\x72\x02\x9a\xe7\xe8\x31\xc2\x9f\xe4\xfe\x10\x8f\xa2\xfd\xca\x96\xb8\xfa\x89\x4a\x1d\x92\x32\x1a\xa4\xb9\xa1\xfb\xa1\x08\x69\x0c\xb9\xa0\x64\x04\x8b\x35\x5c\xfd\x48\x13\x96\x19\x6a\x72\x62\xa4\xcb\x14\xeb\xe5\xc7\xf9\x8d\x1c\xb2\x9a\xc0\x46\xce\xa3\x48\x4b\x04\xaf\xe1\x9f\x1d\xce\x16\x4d\x00\x2b\x7c\x11\xd2\x5f\xd0\x23\x36\x72\x8a\x72\x96\x29\x1a\x8e\xb6\x69\x16\xa9\xb4\x1a\x22\x91\x16\xb8\x6e\xad\x76\xe7\x21\x78\x65\x1e\x82\xb7\x25\x22\x78\x63\x26\x82\xb7\xa7\x82\xbb\x6d\x95\x74\x85\xe7\x2e\x2b\x8f\xcf\x8c\x9c\xaf\xd4\x58\xee\x5f\x2b\x58\x2c\xc0\x29\x0b\xb4\xce\x65\x26\x54\x7a\x2e\xa5\xc5\xa2\x80\xaa\x1a\xc3\xdc\x94\x20\x2c\x42\x6a\xe2\x18\x25\x28\xfd\x3f\x7c\x03\x2e\x20\xb1\x18\x79\xcc\x4d\x4d\x6c\x4a\x62\xfe\xa7\xe6\x0d\x43\x4a\x54\x31\xe2\xae\xf0\xe1\xd7\x16\xea\x43\x18\x79\x93\x17\xe8\xf4\xaa\x81\x7d\xe7\x6e\xbe\x8c\x66\xb1\x00\x2b\x74\x8c\xe0\x64\x58\x14\x22\xc6\x3a\x88\x35\x89\x3c\x87\x82\xe6\x29\x7a\x2c\x17\x52\x2a\x1d\x9f\x4e\x30\x3b\x83\x99\xb1\x12\x6d\xb7\x16\xe1\x43\x6c\x4d\xa9\xe5\x29\xd8\x78\x36\x7c\x7f\x74\x32\x86\xc9\xc9\xd1\x18\x26\xc7\xc7\xa3\x33\xe6\xd7\x6a\xa1\xaa\x36\x3d\xa3\x96\xab\xde\x78\x64\x6c\x06\x4a\x7a\x2c\x62\x90\x21\x25\x46\x7a\xec\xf6\x4b\xf0\x95\x41\x7b\xbe\x1e\x73\xcb\x5c\x0a\xc2\x8d\x56\xe4\x4a\xe7\x25\x35\xcc\xa6\x8e\xba\xfe\x4d\x94\x94\xa8\x19\x68\x91\xe1\xb3\xc5\xdd\xc9\xec\x4a\xa8\x97\xfb\x6c\xdb\x60\xd7\xb2\xc2\xc2\x46\x57\x0a\xd3\x75\x25\x6e\x2d\xc5\xef\x51\x16\xec\x96\x56\x98\xd2\x86\x7b\xa4\x05\xaf\xd7\x16\xfc\x53\x71\x79\x33\x51\x55\xa4\x42\x41\x58\x40\x26\xb4\x88\x51\x9e\xae\x9d\x36\x27\x31\x4b\xb1\xab\x1a\x8f\xb5\xef\x4d\xad\x64\xfd\xad\xde\xe3\x94\xf8\x9f\x45\x86\xdc\xa5\xa4\xdf\x7a\x21\xe6\x05\xdc\x61\x26\x94\x56\x3a\xde\x8d\x0b\x9a\xfc\xee\xb6\x9f\x37\x79\x28\xb6\x01\xdc\xdd\x0c\x6c\xd9\x35\x21\x5a\xda\x6a\x99\x9d\x62\x5a\x83\x6c\xfa\xa1\x16\xd5\xf4\x04\xc9\xfd\xc0\x5a\xdf\x8b\xbc\x83\x18\x53\x8b\xf2\xba\x9c\xd5\xa7\xe2\xb4\xaa\xa1\xaa\x56\xa7\xc8\x3b\x06\x46\x87\xa9\x0a\x1f\x3c\xd6\x0d\xb7\x76\x7a\x0f\xda\x22\x1c\x8c\x07\xf5\x3e\xb7\x82\x12\xa8\xaa\x41\xdd\xc2\xd3\xa4\x16\xfc\x3c\x41\xf6\x45\xd0\x6b\xe8\xb2\xa6\x22\x70\x82\xc4\x3c\x5d\x60\x8a\x54\x47\xf5\xe7\xa0\xee\x87\x03\xd9\xa0\x7b\x82\x6a\xb7\x69\x83\xda\x9e\x27\x7b\xfc\xdf\xa1\xc6\xa7\x43\xdd\x8b\x92\x4c\x8f\xf3\x66\x8f\x43\x7c\xf7\xa7\xab\xb7\xaa\x36\x27\xa2\xdb\xb4\xcd\x12\xb6\x7a\x13\x08\x29\x99\x7f\x2e\x65\x1b\x02\x00\x74\x37\x4f\x7b\xdd\x70\xb7\xfd\x1b\xf4\x3b\x00\x00\xff\xff\x88\x3e\xf5\xb7\x0e\x09\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2318, mode: os.FileMode(420), modTime: time.Unix(1509431990, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSourceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x6a\xc3\x30\x0c\xbd\xef\x2b\x84\x3f\xa0\x3a\xf4\x36\x9c\x5c\x06\xbb\x6e\xd0\xfd\x80\x1b\xab\xb3\x21\xb1\x4d\xac\x0c\x4a\xf0\xbf\x0f\xdb\xd9\xda\x34\x19\x2c\xa7\x48\x7e\xef\xe9\x49\x3c\x69\x78\xe8\xdb\x27\x00\x00\x69\x48\xe9\xfa\x5b\x4a\xb6\xdc\x53\xfb\x62\x94\xfb\x24\x88\x7e\x1a\x3b\x92\x58\x9b\x15\x8f\x37\x82\x3c\x7b\x7d\xbd\xe3\x9a\xe3\x23\xd1\x1c\xef\x9e\x2f\x7e\x1c\x60\x20\x36\x5e\x37\xe2\xfd\xed\xf4\x21\x40\x75\x6c\xbd\x6b\x04\x4e\x41\x2b\x26\x71\x43\x17\x86\x75\x61\x62\xe0\x6b\xa0\x46\x18\xab\x35\x39\x01\x4e\x0d\xd4\x88\x4a\x14\xf0\xa5\xfa\x89\x1a\x51\xe7\x09\xc0\x7f\x0b\x18\x1f\xf9\x97\x3e\xcf\x70\xc8\x0d\x48\x69\xab\x11\xd6\x4b\x01\xfb\x67\x89\x61\x03\x5a\xd5\xa5\x17\xa9\xa7\x8e\x97\x79\x8b\xc3\x2d\x2c\x7f\xf3\x0c\x63\x19\x71\xa8\xb0\x08\x29\xed\x02\x8b\xae\x0f\x79\xf7\x36\x9b\x86\x94\x24\x2e\xf5\x5f\xca\xe4\xf4\x9e\x9c\xc4\xea\xef\x61\x91\x9d\xcd\x56\x57\x8c\xd3\x79\xb0\xb7\xcb\x9d\x96\x12\xdb\x0d\x33\xfb\xeb\xe2\x78\x79\xb5\xd4\xaf\x1c\x48\xcc\x49\xf8\x89\x53\xcd\x90\xc4\x1a\xc9\xef\x00\x00\x00\xff\xff\x3b\x09\x10\x5f\x9a\x02\x00\x00")

func dataSourceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSourceHtml,
		"data/source.html",
	)
}

func dataSourceHtml() (*asset, error) {
	bytes, err := dataSourceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/source.html", size: 666, mode: os.FileMode(420), modTime: time.Unix(1509413501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/add.html": dataAddHtml,
	"data/index.html": dataIndexHtml,
	"data/source.html": dataSourceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{dataAddHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"source.html": &bintree{dataSourceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

