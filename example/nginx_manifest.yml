---
name: nginx

director_uuid: 84aa92b0-0756-428c-a91e-7db798d20026

releases:
- name: nginx
  version: latest
- name: nginx-tlsconfig-release
  version: latest

stemcells:
- alias: ubuntu
  os: ubuntu-trusty
  version: latest

instance_groups:

### Nginx machines runs as services
- name: nginx-ubuntu
  lifecycle: service
  instances: 1
  vm_type: default
  stemcell: ubuntu
  azs: [z1]
  networks:
  - name: default
  jobs:
  - name: tls-config
    release: nginx-tlsconfig-release
    properties:
      # FIXME: If needed to, we could specify different certificate folder. This could be the case when we mount a NFS volume to store all certificates.
      cert_folder: /var/vcap/jobs/tls-config/certs/
      nginx_conf_folder: /var/vcap/jobs/tls-config/vhosts/
      certs: []  ## Cert and vhost configs are included in operator files
  - name: nginx
    release: nginx
    properties:
      nginx_conf: |
        # Optimise this depends on the vm-type and how many VCPU available.
        worker_processes  1;
        # Location for error log
        error_log /var/vcap/sys/log/nginx/error.log   info;
        # How many clients can be served simultaneously ?
        # Run `ulimit -n` to find out our core's limitation.
        events {
          worker_connections  1024;
        }
        http {
          # For more information on tcp_nopush and tcp_nodelay, read here:
          # https://www.linode.com/docs/web-servers/nginx/configure-nginx-for-optimized-performance
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          keepalive_requests 100000;
          # prevent clickjacking attacks
          add_header  X-Frame-Options SAMEORIGIN;

          # disallow circumventing declared MIME types
          add_header  X-Content-Type-Options nosniff;

          # X-XSS-Protection
          add_header  X-XSS-Protection '1; mode=block';

          include /var/vcap/packages/nginx/conf/mime.types;

          # Set default type for unspecified mime type
          default_type  application/octet-stream;

          # We are not serving files stored on Nginx so no need for this feature which helps serving static files.
          sendfile        off;
          # Turn off server side include
          ssi off;
          server_names_hash_bucket_size 64;
          # Default HTTP request will redirect to HTTPS
          server {
              listen *:80;
              server_name _;
              # This is the most important bit for this to work, we will need to forward all acme-challenge requests to our
              # letsencrypt errand instance.
              location /.well-known/acme-challenge {
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_redirect off;
                  # FIXME: Change this to the static ip of the letsencrypt errand machine in production.
                  proxy_pass http://10.244.0.10;
              }
              # All other URIs should result in a 301 redirect to equivalent HTTPS pages.
              location / {
                return 301 https://$host$request_uri;
              }
          }
          # TODO: This need to be specified in production and generated outselve.
          # ssl_dhparam /var/vcap/jobs/nginx/conf/dhparam.pem;
          # FIXME: Include all vhosts files from our addon release (make sure the folder path matches with what we specified earlier.)
          include /var/vcap/jobs/tls-config/vhosts/*.conf;
        }
      pre_start: |
        #!/bin/bash -ex
        # This prestart script will be executed after
        # nginx-multiple-ssl-addon prestart scrpt.
        # This is not needed at the moment.

### Letsencrypt machine runs as errand to renew certificates
- name: letsencrypt-errand
  lifecycle: errand
  #lifecycle: service
  instances: 1
  vm_type: default
  stemcell: ubuntu
  azs: [z2]
  networks:
  - name: default
    static_ips: [10.244.0.10]
  jobs:
  - name: letsencrypt_to_credhub
    release: nginx-tlsconfig-release
    properties:
      # We set `demo` to true when running it against BoshLite environment. This will make the errand skips the letsencrypt challenge and credhub import.
      demo: true
      # Because this instance is an errand, We cannot rely on monit script to start nginx.
      # For letsencrypt challenge to work, we need to manually start and stop nginx using the run_head and run_tail properties
      # which inject commands into the begining and the end of errand run script
      run_head: |
        echo "Starting nginx and wait for it to start"
        if ! nc -z localhost 80 ;
        then
          /var/vcap/jobs/nginx/bin/ctl start
          while ! nc -z localhost 80; do sleep 0.5; done; echo 'HTTP server is up!'
        fi
      run_tail: /var/vcap/jobs/nginx/bin/ctl stop
      cert_folder: "/var/vcap/store/letsencrypt/certs/"
      webroot: "/var/vcap/packages/nginx/html/.well-known/acme-challenge/"
      credhub_client_id: credhub-cli
      credhub_client_secret: ((credhub_password))
      credhub_client_cas: ((credhub_ca))
      # FIXME: For this example, we are targetting the boshlite deployment credhub installation.
      credhub_host: "https://192.168.50.6:8844"
      # FIXME: When doing the deployment for this example, we will need to call this deployment nginx (bosh2 -e vbox -d nginx deploy nginx_manifest.yml -o this_example_com.yml )
      credhub_prefix: "/Bosh Lite Director/nginx/"
      certs: []
  # Nginx job from Nginx release is used to serve the acme challenges for all domains
  # We can use `python -m SimpleHTTPServer` to serve this challenge temporary but we can't be sure about any security weakness this may expose.
  # Hence a safer solution is to use the actual Nginx release for this task.
  - name: nginx
    release: nginx
    properties:
      nginx_conf: |
        events {
          worker_connections  1024;
        }
        http {
          server {
              listen *:80;
              server_name _;
              ## Allow access to .well-known folder. By default, accessing to all dot files and folder is denied
              location ~ /.well-known {
                  allow all;
              }
          }
        }
      pre_start: |
        #!/bin/bash -ex
        ## We are adding an empty errand script so this errand can be executed
        echo "#!/bin/bash" > /var/vcap/jobs/nginx/bin/run
        chmod +x /var/vcap/jobs/nginx/bin/run
        ## Creating .well-known/acme-challenge folder for acme-tiny.py script
        mkdir -p /var/vcap/packages/nginx/html/.well-known/acme-challenge/

variables:
- name: example-ca
  type: certificate
  options:
    is_ca: true
    common_name: example.com


update:
  canaries: 1
  max_in_flight: 1
  serial: false
  canary_watch_time: 1000-60000
  update_watch_time: 1000-60000
