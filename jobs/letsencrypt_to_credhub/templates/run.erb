#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

echo "Starting letsencrypt to credhub errand script"

<% if p('wait_for') != "NONE" %>
  sleep 1
  while pegrep -f "<%= p('wait_for') %>" > /dev/null;
    do sleep 1;
  done
<% end %>

<%= p('run_head') %>

## SET alias to make executing acme script easy
ACME="python /var/vcap/packages/letsencrypt/bin/acme_tiny.py"

export LENC_CERT_LOCATION=<%= p('cert_folder') %>
export WEBROOT=<%= p('webroot') %>

## SET alias to make executing credhub command easy
CREDHUB="/var/vcap/packages/credhub/bin/credhub"

# Used automatically by credhub CLI
export CREDHUB_CLIENT="<%= p('credhub_client_id') %>"
export CREDHUB_SECRET="<%= p('credhub_client_secret') %>"
export CREDHUB_CA_CERT="<%= p('credhub_ca_certs') %>"
export CREDHUB_SERVER="<%= p('credhub_host') %>"

export GLOBAL_CREDHUB_PREFIX="<%= p('credhub_prefix') %>"

if [ ! -d $LENC_CERT_LOCATION ]; then
  mkdir -p $LENC_CERT_LOCATION
fi

echo "Going through all the certs array and populate signed certificate"
<%
p('certs').each do |cert|
%>

<% if !cert["ignore"] %>

    echo "Renewing <%= cert["name"] %>"
    export CURRENTTIME=$(date +"%Y%m%d-%H%M")
    export CERTNAME="<%= cert["name"] %>"
    export CERTFOLDER="$LENC_CERT_LOCATION/$CERTNAME"

    # Create a unique folder for each item and back up old ones. (could be useful feature when working with Shared volumes (eg AWS-EFS))

    if [ ! -d $CERTFOLDER ]; then
      # Create new cert folder
      mkdir -p $CERTFOLDER
    else
      # Backup previous cert
      mv $CERTFOLDER $CERTFOLDER.$CURRENTTIME
      # Create new cert folder
      mkdir -p $CERTFOLDER
    fi

    ## Using EOF multi line instead of "echo -n" to avoid problems with quotes
## Note: Indentation will break the usage of EOF in this bashscript

cat <<- "_EOF_<%= cert["name"] %>.cnf_" > "/${CERTFOLDER}/cert.cnf"
<%= cert["cnf"] %>
_EOF_<%= cert["name"] %>.cnf_

cat <<- "_EOF_<%= cert["name"] %>.domain.key_" > "/${CERTFOLDER}/domain.key"
<%= cert["domain_key"] %>
_EOF_<%= cert["name"] %>.domain.key_

cat <<- "_EOF_<%= cert["name"] %>.account.key_" > "/${CERTFOLDER}/account.key"
<%= cert["account_key"] %>
_EOF_<%= cert["name"] %>.account.key_

    # Create openssl CNF config file

    # Signing the CNF with domain private key and create a CSR (Certificate Signing Request)
    openssl req -new -key "$CERTFOLDER/domain.key" -config "$CERTFOLDER/cert.cnf" -out "$CERTFOLDER/cert.csr"

    # Get intermediate cert

    wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > "$CERTFOLDER/intermediate.pem"

    export VARNAME="<%= cert["name"] %>"

    <% if cert["credhub_prefix"] != nil %>
      export CREDHUB_PREFIX="<%= cert["credhub_prefix"] %>"
    <% else %>
      export CREDHUB_PREFIX="$GLOBAL_CREDHUB_PREFIX"
    <% end %>

    ## Make sure CREDHUB_PREFIX end with /
    if [[ "$CREDHUB_PREFIX"  != *\/ ]]
    then
        export CREDHUB_PREFIX=$CREDHUB_PREFIX/
    fi
    export PRIVKEY="$CERTFOLDER/domain.key"
    export SIGNEDCERT="$CERTFOLDER/chained.pem"

    <% if !p('demo') %>
        # LetsEncrypt will now do validation and optain new cert.
        # Account key is used for validation. This key can be used to revoke certs using certbot client.
        # A signed cert will be created under "$CERTFOLDER".

        echo "Running acme-tiny script to get signed cert from Letsencrypt"
        $ACME --account-key "$CERTFOLDER/account.key" \
          --csr "$CERTFOLDER/cert.csr" \
          --acme-dir "$WEBROOT" > "$CERTFOLDER/signed.crt"

        echo "Generating final cert for <%= cert["name"] %>"

        cat "$CERTFOLDER/signed.crt" "$CERTFOLDER/intermediate.pem" > "$CERTFOLDER/chained.pem"

        echo "Starting to import <%= cert["name"] %> into credhub"

        # Upload 2 versions to credhub ... one with $CURRENTTIME for revision
        echo "Importing $SIGNEDCERT"

        # piping to /dev/null so we will not leak sensitive credential to Concourse in the future.
        $CREDHUB set -t certificate \
          -p $PRIVKEY -c $SIGNEDCERT \
          -n "$CREDHUB_PREFIX$VARNAME-$CURRENTTIME" > /dev/null

        $CREDHUB set -t certificate \
          -p $PRIVKEY -c $SIGNEDCERT \
          -n "$CREDHUB_PREFIX$VARNAME" > /dev/null
    <% else %>
        echo "'demo' is currently set to true. Letsencrypt validation and credhub update is ignored"
    <% end %>
<% else %>
    echo "Skipping renewal for <%= cert["name"] %> because 'ignore' flag is set to true"
<% end %>

<% end %>

<%= p('run_tail') %>
